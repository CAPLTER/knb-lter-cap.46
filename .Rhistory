mutate(
observer_name_part = case_when(
is.na(namePart3) ~ paste0(namePart1, namePart2),
!is.na(namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_birds <- core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"), # standardize rain
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
write_attributes(core_birds)
write_factors(core_birds)
core_birds_desc <- "bird survey sampling details (site, date, time, observer, site conditions, and notes) and birds surveyed (type, number, distance from observer, behavior)"
core_birds_DT <- create_dataTable(dfname = core_birds,
description = core_birds_desc)
core_bird_locations <- dbGetQuery(mysql_prod, "
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
blh.end_date_year
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null >= 1 AND
blh.end_date_year IS NULL)
UNION
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
MAX(blh.end_date_year)
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null IS NULL
GROUP BY s.site_code)
ORDER BY location_type, site_code;")
core_bird_locations <- core_bird_locations %>%
mutate(
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")
) %>%
select(-count_any_null, -end_date_year) %>%
arrange(location_type, site_code)
# using sp and rgdal
# library(sp)
# library(rgdal)
#
# coordinates(core_bird_locations) <- c("long", "lat")
# proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
#
# writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
# using sf - allows us to assign site_code to the kml's Name field
library(sf)
core_bird_locations <- st_as_sf(x = core_bird_locations,
coords = c("long", "lat"),
crs = 4326) %>%
mutate(Name = site_code)
st_write(core_bird_locations, driver = 'kml', dsn = "core_bird_locations.kml")
# using sp and rgdal
# library(sp)
# library(rgdal)
#
# coordinates(core_bird_locations) <- c("long", "lat")
# proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
#
# writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
# using sf - allows us to assign site_code to the kml's Name field
library(sf)
core_bird_locations <- st_as_sf(x = core_bird_locations,
coords = c("long", "lat"),
crs = 4326) %>%
mutate(Name = site_code)
st_write(core_bird_locations, driver = 'kml', dsn = "core_bird_locations.kml")
core_bird_locations <- create_otherEntity(targetFile = 'core_bird_locations.kml',
description = 'bird survey locations')
title <- 'Point-count bird censusing: long-term monitoring of bird abundance and diversity in central Arizona-Phoenix, ongoing since 2000'
abstract <- set_TextType("abstract.md")
# see gioseml for examples of creating people resources from scratch
eyal <- create_role(firstName = "eyal", lastName = "shochat", roleType = "creator")
madhu <- create_role(firstName = "ma", lastName = "katti", roleType = "creator")
dan <- create_role(firstName = "dan", lastName = "childers", roleType = "creator")
heather <- create_role(firstName = "hea", lastName = "bateman", roleType = "creator")
creators <- list(eyal, madhu, dan, heather )
stevan <- create_role(firstName = "stevan", lastName = "earl", roleType = "metadata")
metadataProvider <- list(stevan)
# CAP IRTs for reference (be sure to include these as appropriate):
# https://sustainability.asu.edu/caplter/research/
write_keywords()
keywords <- create_keywordSet('keywords.csv')
methods <- set_methods("methods.md")
begindate <- as.character(min(core_birds$survey_date))
enddate <- as.character(max(core_birds$survey_date))
geographicDescription <- "CAP LTER study area"
coverage <- set_coverage(begin = begindate,
end = enddate,
# sci_names = c("Salix spp",
#               "Ambrosia deltoidea"),
geographicDescription = geographicDescription,
west = -112.742, east = -111.622,
north = +33.8814, south = +33.2187)
my_path <- getwd()
taxaCoverage <- make_taxonomicCoverage(path = my_path)
library(taxonomyCleanr)
taxaCoverage <- make_taxonomicCoverage(path = my_path)
coverage
coverage$taxonomicCoverage <- taxaCoverage
print(ls(pattern = "_DT"))
print(ls(pattern = "OE_"))
# from capeml package:
# address
# publisher
# contact
# rights
# distribution
# generate a list of EML dataTables
listOfDataTables <- lapply(ls(pattern = "_DT"), function(DT) { get(DT) } )
# print list of dataTables as a safety step
print(ls(pattern = "_DT"))
# DATASET
dataset <- eml$dataset(
title = title,
creator = creators,
pubDate = pubDate,
metadataProvider = metadataProvider,
intellectualRights = capRights,
abstract = abstract,
keywordSet = keywords,
coverage = coverage,
contact = giosContact,
publisher = giosPublisher,
methods = methods,
distribution = create_distribution(packageIdent),
dataTable = listOfDataTables)
# add associatedParty if relevant
# dataset$associatedParty <- list()
# add other entities if relevant
dataset$otherEntity <- list(core_bird_locations )
dataset
if(exists('unitList')) {
eml <- eml$eml(
access = lterAccess,
dataset = dataset,
additionalMetadata = unitList,
packageId = packageIdent,
system = "knb",
scope = "system"
)
} else {
eml <- eml$eml(
access = lterAccess,
dataset = dataset,
packageId = packageIdent,
system = "knb",
scope = "system"
)
}
# write the eml to file
write_eml(eml, paste0(packageIdent, ".xml"))
# preview data set files that will be uploaded to S3
list.files(pattern = paste0(projectid, "_"))
# upload files to S3
lapply(list.files(pattern = paste0(projectid, "_")), dataToAmz)
View(core_birds)
unique(core_birds$observer_name_part)
write_attributes(core_birds)
unique(core_birds$wind_speed)
sort(unique(core_birds$wind_speed))
knitr::opts_chunk$set(echo = TRUE)
options("emld_db" = "eml-2.1.1")
library(EML)
library(RPostgreSQL)
library(RMySQL)
library(tidyverse)
library(tools)
library(readxl)
library(aws.s3)
library(capeml)
library(gioseml)
projectid <- 46
packageIdent <- 'knb-lter-cap.46.16'
pubDate <- as.character(Sys.Date())
source('~/localRepos/reml-helper-tools/amazon_file_upload.R')
source('~/Documents/localSettings/aws.s3')
source('~/Documents/localSettings/pg_local.R')
pg <- pg_local
source('~/Documents/localSettings/mysql_prod.R')
mysql_prod <- mysql_prod_connect()
core_birds <- dbGetQuery(mysql_prod, "
SELECT
sites.site_code,
sites.sample AS location_type,
surveys.survey_date,
surveys.time_start,
surveys.time_end,
surveys.observer,
surveys.wind_speed,
surveys.wind_dir,
surveys.air_temp,
surveys.cloud_cover,
surveys.notes AS survey_notes,
surveys.human_activity_notes,
surveys.wind,
surveys.precipitation,
surveys.disturbances,
surveys.sight_obstruct,
surveys.noise_level,
surveys.site_condition,
surveys.non_bird_species,
bird_taxons.code,
bird_taxons.common_name,
birds.distance,
birds.bird_count,
birds.notes AS observation_notes,
birds.seen,
birds.heard,
birds.direction,
birds.QCcomment
FROM lter34birds.surveys
JOIN lter34birds.sites ON (surveys.site_id = sites.site_id)
JOIN lter34birds.birds ON (surveys.survey_id = birds.survey_id)
JOIN lter34birds.bird_taxons ON (birds.bird_taxon_id = bird_taxons.id)
WHERE
sites.sample LIKE '200 point' OR
sites.sample LIKE 'riparian' OR
sites.sample LIKE 'north desert village' OR
sites.sample LIKE 'capiv' OR
(sites.sample LIKE 'SRBP' AND sites.site_code LIKE CONCAT('%','CORE'))
ORDER BY survey_date
LIMIT 500000;")
# lots of missing values, convert to NA
core_birds[core_birds == ''] <- NA
core_birds <- core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = T) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
is.na(namePart3) ~ paste0(namePart1, namePart2),
!is.na(namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_birds <- core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"), # standardize rain
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
write_attributes(core_birds)
write_factors(core_birds)
core_birds_desc <- "bird survey sampling details (site, date, time, observer, site conditions, and notes) and birds surveyed (type, number, distance from observer, behavior)"
core_birds_DT <- create_dataTable(dfname = core_birds,
description = core_birds_desc)
core_bird_locations <- dbGetQuery(mysql_prod, "
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
blh.end_date_year
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null >= 1 AND
blh.end_date_year IS NULL)
UNION
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
MAX(blh.end_date_year)
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null IS NULL
GROUP BY s.site_code)
ORDER BY location_type, site_code;")
core_bird_locations <- core_bird_locations %>%
mutate(
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")
) %>%
select(-count_any_null, -end_date_year) %>%
arrange(location_type, site_code)
# using sp and rgdal
# library(sp)
# library(rgdal)
#
# coordinates(core_bird_locations) <- c("long", "lat")
# proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
#
# writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
# using sf - allows us to assign site_code to the kml's Name field
library(sf)
core_bird_locations <- st_as_sf(x = core_bird_locations,
coords = c("long", "lat"),
crs = 4326) %>%
mutate(Name = site_code)
st_write(core_bird_locations, driver = 'kml', dsn = "core_bird_locations.kml")
core_bird_locations <- create_otherEntity(targetFile = 'core_bird_locations.kml',
description = 'bird survey locations')
title <- 'Point-count bird censusing: long-term monitoring of bird abundance and diversity in central Arizona-Phoenix, ongoing since 2000'
abstract <- set_TextType("abstract.md")
# see gioseml for examples of creating people resources from scratch
eyal <- create_role(firstName = "eyal", lastName = "shochat", roleType = "creator")
madhu <- create_role(firstName = "ma", lastName = "katti", roleType = "creator")
dan <- create_role(firstName = "dan", lastName = "childers", roleType = "creator")
heather <- create_role(firstName = "hea", lastName = "bateman", roleType = "creator")
creators <- list(eyal, madhu, dan, heather )
stevan <- create_role(firstName = "stevan", lastName = "earl", roleType = "metadata")
metadataProvider <- list(stevan)
# CAP IRTs for reference (be sure to include these as appropriate):
# https://sustainability.asu.edu/caplter/research/
write_keywords()
keywords <- create_keywordSet('keywords.csv')
methods <- set_methods("methods.md")
begindate <- as.character(min(core_birds$survey_date))
enddate <- as.character(max(core_birds$survey_date))
geographicDescription <- "CAP LTER study area"
coverage <- set_coverage(begin = begindate,
end = enddate,
# sci_names = c("Salix spp",
#               "Ambrosia deltoidea"),
geographicDescription = geographicDescription,
west = -112.742, east = -111.622,
north = +33.8814, south = +33.2187)
taxaCoverage <- make_taxonomicCoverage(path = my_path)
library(taxonomyCleanr)
taxaCoverage <- make_taxonomicCoverage(path = my_path)
my_path <- getwd()
taxaCoverage <- make_taxonomicCoverage(path = my_path)
coverage$taxonomicCoverage <- taxaCoverage
# from capeml package:
# address
# publisher
# contact
# rights
# distribution
# generate a list of EML dataTables
listOfDataTables <- lapply(ls(pattern = "_DT"), function(DT) { get(DT) } )
# print list of dataTables as a safety step
print(ls(pattern = "_DT"))
# DATASET
dataset <- eml$dataset(
title = title,
creator = creators,
pubDate = pubDate,
metadataProvider = metadataProvider,
intellectualRights = capRights,
abstract = abstract,
keywordSet = keywords,
coverage = coverage,
contact = giosContact,
publisher = giosPublisher,
methods = methods,
distribution = create_distribution(packageIdent),
dataTable = listOfDataTables)
# add associatedParty if relevant
# dataset$associatedParty <- list()
# add other entities if relevant
dataset$otherEntity <- list(core_bird_locations )
if(exists('unitList')) {
eml <- eml$eml(
access = lterAccess,
dataset = dataset,
additionalMetadata = unitList,
packageId = packageIdent,
system = "knb",
scope = "system"
)
} else {
eml <- eml$eml(
access = lterAccess,
dataset = dataset,
packageId = packageIdent,
system = "knb",
scope = "system"
)
}
# write the eml to file
write_eml(eml, paste0(packageIdent, ".xml"))
# preview data set files that will be uploaded to S3
list.files(pattern = paste0(projectid, "_"))
# upload files to S3
lapply(list.files(pattern = paste0(projectid, "_")), dataToAmz)

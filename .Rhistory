bird_taxons.code,
bird_taxons.common_name,
birds.distance,
birds.bird_count,
birds.notes AS observation_notes,
birds.seen,
birds.heard,
birds.direction,
birds.QCcomment
FROM lter34birds.surveys
JOIN lter34birds.sites ON (surveys.site_id = sites.site_id)
JOIN lter34birds.birds ON (surveys.survey_id = birds.survey_id)
JOIN lter34birds.bird_taxons ON (birds.bird_taxon_id = bird_taxons.id)
WHERE
sites.sample LIKE '200 point' OR
sites.sample LIKE 'riparian' OR
sites.sample LIKE 'north desert village' OR
sites.sample LIKE 'capiv' OR
(sites.sample LIKE 'SRBP' AND sites.site_code LIKE CONCAT('%','CORE'))
ORDER BY survey_date
LIMIT 500000;")
core_birds %>% distinct(precipitation)
# lots of missing values, convert to NA
core_birds[core_birds == ''] <- NA
core_birds %>% distinct(precipitation)
core_birds <- core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = T) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
grepl("NA", namePart3) ~ paste0(namePart1, namePart2),
!grepl("NA", namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
core_birds %>% distinct(observer_name_part)
source('~/Documents/localSettings/mysql_prod.R')
mysql_prod <- mysql_prod_connect()
core_birds <- dbGetQuery(mysql_prod, "
SELECT
sites.site_code,
sites.sample AS location_type,
surveys.survey_date,
surveys.time_start,
surveys.time_end,
surveys.observer,
surveys.wind_speed,
surveys.wind_dir,
surveys.air_temp,
surveys.cloud_cover,
surveys.notes AS survey_notes,
surveys.human_activity_notes,
surveys.wind,
surveys.precipitation,
surveys.disturbances,
surveys.sight_obstruct,
surveys.noise_level,
surveys.site_condition,
surveys.non_bird_species,
bird_taxons.code,
bird_taxons.common_name,
birds.distance,
birds.bird_count,
birds.notes AS observation_notes,
birds.seen,
birds.heard,
birds.direction,
birds.QCcomment
FROM lter34birds.surveys
JOIN lter34birds.sites ON (surveys.site_id = sites.site_id)
JOIN lter34birds.birds ON (surveys.survey_id = birds.survey_id)
JOIN lter34birds.bird_taxons ON (birds.bird_taxon_id = bird_taxons.id)
WHERE
sites.sample LIKE '200 point' OR
sites.sample LIKE 'riparian' OR
sites.sample LIKE 'north desert village' OR
sites.sample LIKE 'capiv' OR
(sites.sample LIKE 'SRBP' AND sites.site_code LIKE CONCAT('%','CORE'))
ORDER BY survey_date
LIMIT 500000;")
# lots of missing values, convert to NA
core_birds[core_birds == ''] <- NA
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F)
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
select(name1, name2, name3, observer)
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
select(observer, namePart1, namePart2, namePart3)
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
select(observer, namePart1, namePart2, namePart3) %>%
distinct(observer, namePart1, namePart2, namePart3) %>%
View()
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
select(observer, namePart1, namePart2, namePart3) %>%
distinct(observer, namePart1, namePart2, namePart3) %>%
View("oe")
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
grepl("NA", namePart3) ~ paste0(namePart1, namePart2),
!grepl("NA", namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
) %>%
select(observer, namePart1, namePart2, namePart3) %>%
distinct(observer, namePart1, namePart2, namePart3) %>%
View("orig-paste")
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
grepl("NA", namePart3) ~ paste0(namePart1, namePart2),
!grepl("NA", namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
) %>%
select(observer, namePart1, namePart2, namePart3, observer_name_part) %>%
distinct(observer) %>%
View("orig-paste")
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
grepl("NA", namePart3) ~ paste0(namePart1, namePart2),
!grepl("NA", namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
) %>%
# select(observer, namePart1, namePart2, namePart3, observer_name_part) %>%
distinct(observer, namePart1, namePart2, namePart3, observer_name_part) %>%
View("orig-paste")
core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = F) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
is.na(namePart3) ~ paste0(namePart1, namePart2),
!is.na(namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
) %>%
# select(observer, namePart1, namePart2, namePart3, observer_name_part) %>%
distinct(observer, namePart1, namePart2, namePart3, observer_name_part) %>%
View("new-paste")
core_birds %>% distinct(observer)
core_birds %>% distinct(observer) %>% sort()
core_birds %>% distinct(observer) %>% sort(observer)
core_birds %>% distinct(observer) %>% arrange(observer)
source('~/Documents/localSettings/mysql_prod.R')
mysql_prod <- mysql_prod_connect()
source('~/Documents/localSettings/mysql_prod.R')
mysql_prod <- mysql_prod_connect()
core_birds <- dbGetQuery(mysql_prod, "
SELECT
sites.site_code,
sites.sample AS location_type,
surveys.survey_date,
surveys.time_start,
surveys.time_end,
surveys.observer,
surveys.wind_speed,
surveys.wind_dir,
surveys.air_temp,
surveys.cloud_cover,
surveys.notes AS survey_notes,
surveys.human_activity_notes,
surveys.wind,
surveys.precipitation,
surveys.disturbances,
surveys.sight_obstruct,
surveys.noise_level,
surveys.site_condition,
surveys.non_bird_species,
bird_taxons.code,
bird_taxons.common_name,
birds.distance,
birds.bird_count,
birds.notes AS observation_notes,
birds.seen,
birds.heard,
birds.direction,
birds.QCcomment
FROM lter34birds.surveys
JOIN lter34birds.sites ON (surveys.site_id = sites.site_id)
JOIN lter34birds.birds ON (surveys.survey_id = birds.survey_id)
JOIN lter34birds.bird_taxons ON (birds.bird_taxon_id = bird_taxons.id)
WHERE
sites.sample LIKE '200 point' OR
sites.sample LIKE 'riparian' OR
sites.sample LIKE 'north desert village' OR
sites.sample LIKE 'capiv' OR
(sites.sample LIKE 'SRBP' AND sites.site_code LIKE CONCAT('%','CORE'))
ORDER BY survey_date
LIMIT 500000;")
# lots of missing values, convert to NA
core_birds[core_birds == ''] <- NA
core_birds <- core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = T) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
is.na(namePart3) ~ paste0(namePart1, namePart2),
!is.na(namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
View(core_birds)
core_birds %>% distinct(precipitation)
core_birds %>% filter(!is.na(precipitation | !grepl("none", precipitation)))
core_birds %>% filter(!is.na(precipitation) | !grepl("none", precipitation)))
core_birds %>% filter(!is.na(precipitation) | !grepl("none", precipitation))
core_birds %>% filter(!is.na(precipitation))
core_birds %>% filter(!is.na(precipitation) & !grepl("none", precipitation))
core_birds %>% filter(!is.na(precipitation) & !grepl("none", precipitation)) %>% View()
core_birds %>% filter(!is.na(precipitation) & !grepl("none", precipitation)) %>% View("oe precip")
core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"),
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
filter(!is.na(precipitation) & !grepl("none", precipitation)) %>% View("new precip")
core_birds %>% distinct(noise_level)
core_birds %>% distinct(distance)
core_birds %>% distinct(disturbances)
core_birds %>% distinct(seen)
core_birds %>% distinct(heard)
core_birds %>% distinct(direction)
core_birds %>% distinct(wind)
core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"),
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
colnames()
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_birds <- core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"), # standardize rain
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
head(core_birds)
taxa_column <- "common_name"
dataset_taxa <- dataset %>%
distinct(taxa_column) %>%
filter(!is.na(taxa_column)) %>%
pull(taxa_column)
taxa_column <- "common_name"
dataset_taxa <- core_birds %>%
distinct(taxa_column) %>%
filter(!is.na(taxa_column)) %>%
pull(taxa_column)
quo(common_name)
taxa_column <- quo(common_name)
core_birds %>%
distinct(!!taxa_column) %>%
filter(!is.na(!!taxa_column)) %>%
pull(!!taxa_column)
taxa_column <- quo(common_name)
dataset_taxa <- core_birds %>%
distinct(!!taxa_column) %>%
filter(!is.na(!!taxa_column)) %>%
pull(!!taxa_column)
library(taxize)
identify_resolvable_taxa()
identify_resolvable_taxa
?get_tsn
devtools::install_github('caplter/capeml')
rm(taxa_column)
taxaColumn <- quo(common_name)
datasetTaxa <- core_birds %>%
distinct(!!taxaColumn) %>%
filter(!is.na(!!taxaColumn)) %>%
pull(!!taxaColumn)
library(taxize)
allTaxa <- identify_resolvable_taxa(datasetTaxa)
identify_resolvable_taxa
library(capeml)
identify_resolvable_taxa
devtools::install_github('caplter/capeml')
library(capeml)
identify_resolvable_taxa
library(EML)
library(RPostgreSQL)
library(RMySQL)
library(tidyverse)
library(tools)
library(readxl)
library(aws.s3)
library(capeml)
library(gioseml)
knitr::opts_chunk$set(echo = TRUE)
options("emld_db" = "eml-2.1.1")
projectid <- 46
packageIdent <- 'knb-lter-cap.46.16'
pubDate <- as.character(Sys.Date())
source('~/Documents/localSettings/mysql_prod.R')
mysql_prod <- mysql_prod_connect()
core_birds <- dbGetQuery(mysql_prod, "
SELECT
sites.site_code,
sites.sample AS location_type,
surveys.survey_date,
surveys.time_start,
surveys.time_end,
surveys.observer,
surveys.wind_speed,
surveys.wind_dir,
surveys.air_temp,
surveys.cloud_cover,
surveys.notes AS survey_notes,
surveys.human_activity_notes,
surveys.wind,
surveys.precipitation,
surveys.disturbances,
surveys.sight_obstruct,
surveys.noise_level,
surveys.site_condition,
surveys.non_bird_species,
bird_taxons.code,
bird_taxons.common_name,
birds.distance,
birds.bird_count,
birds.notes AS observation_notes,
birds.seen,
birds.heard,
birds.direction,
birds.QCcomment
FROM lter34birds.surveys
JOIN lter34birds.sites ON (surveys.site_id = sites.site_id)
JOIN lter34birds.birds ON (surveys.survey_id = birds.survey_id)
JOIN lter34birds.bird_taxons ON (birds.bird_taxon_id = bird_taxons.id)
WHERE
sites.sample LIKE '200 point' OR
sites.sample LIKE 'riparian' OR
sites.sample LIKE 'north desert village' OR
sites.sample LIKE 'capiv' OR
(sites.sample LIKE 'SRBP' AND sites.site_code LIKE CONCAT('%','CORE'))
ORDER BY survey_date
LIMIT 500000;")
# lots of missing values, convert to NA
core_birds[core_birds == ''] <- NA
core_birds <- core_birds %>%
separate(observer, c("name1", "name2", "name3"), " ", remove = T) %>%
mutate(
namePart1 = toTitleCase(str_extract(name1, "\\b\\w{2}")),
namePart2 = toTitleCase(str_extract(name2, "\\b\\w{2}")),
namePart3 = toTitleCase(str_extract(name3, "\\b\\w{2}"))
) %>%
mutate(
observer_name_part = case_when(
is.na(namePart3) ~ paste0(namePart1, namePart2),
!is.na(namePart3) ~ paste0(namePart1, namePart2, namePart3)
)
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_birds <- core_birds %>%
mutate(
survey_date = as.Date(survey_date),
location_type = replace(location_type, location_type == "200 point", "ESCA"),
location_type = replace(location_type, location_type == "North Desert Village", "NDV"),
location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization"),
location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS"),
location_type = as.factor(location_type),
wind_dir = as.factor(wind_dir),
wind = as.factor(wind),
precipitation = replace(precipitation, precipitation == "lt_rain", "light_rain"), # standardize rain
precipitation = as.factor(precipitation),
disturbances = as.factor(disturbances),
noise_level = as.factor(noise_level),
distance = as.factor(distance),
seen = as.factor(seen),
heard = as.factor(heard),
direction = as.factor(direction)
) %>%
select(site_code:time_end, observer_name_part, wind_speed:QCcomment)
taxaColumn <- quo(common_name)
datasetTaxa <- core_birds %>%
distinct(!!taxaColumn) %>%
filter(!is.na(!!taxaColumn)) %>%
pull(!!taxaColumn)
library(taxize)
identify_resolvable_taxa
allTaxa <- identify_resolvable_taxa(taxa_list = datasetTaxa,
nameType = "common")
View(allTaxa)
get_tsn("Long -billed Curlew", searchtype = "common")
get_tsn("Long-billed Curlew", searchtype = "common")
write_csv(allTaxa, '~/Desktop/allTaxa.csv')
q()

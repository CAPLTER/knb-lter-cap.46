beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='packageid', fl="title", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
content(beta, 'parsed')
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl="title", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
content(beta, 'parsed')
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='packageid', fl="title", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
content(beta, 'parsed')
class(beta)
charlie <- content(beta, 'parsed')
charlie
class(charlie)
library(xml2)
emlfile <- read_xml(charlie)
html_structure(charlie)
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='title', fl="packageid", fl="begindata", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
charlie <- content(beta, 'parsed')
content(beta, 'parsed')
html_structure(charlie)
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='-abstract', sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
content(beta, 'parsed')
charlie <- content(beta, 'parsed')
html_structure(charlie)
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='title', fl="packageid", fl="begindata", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
charlie <- content(beta, 'parsed')
html_structure(charlie)
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='pubdate', fl="packageid", fl="begindata", sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
charlie <- content(beta, 'parsed')
html_structure(charlie)
charlie
beta <- GET("https://pasta-s.lternet.edu/package/search/eml", query = list(defType=parser, q=keyword, fq="-scope:ecotrends", fq="-scope:lter-landsat*", fl='*', sort="score,desc", sort="packageid,asc", debug="false", start="0", rows="10"))
charlie <- content(beta, 'parsed')
html_structure(charlie)
xml_text(xml_find_all(charlie, "//title"))
html_structure(charlie)
length(charlie)
xml_text(xml_find_all(charlie, "//title"))
charlie
nrow(charlie)
html_structure(charlie)
xml_ns(charlie)
xml_name(charlie)
xml_text(charlie)
xml_text(charlie[[2]])
xml_node(charlie)
xml_length(charlie)
xml_length(charlie)
xml_children(charlie)
xml_siblings(charlie)
xml_child(charlie, 'title')
xml_length(charlie)
?lapply
xml_text(xml_find_all(charlie, "//title"))
lapply(charlie, function(x) xml_find_all(x, "//title"))
lapply(charlie, function(x) xml_find_first(x, "//title"))
sapply(charlie, function(x) xml_find_first(x, "//title"))
xml_text(xml_find_first(charlie, "//title"))
xml_children(charlie)
xml_contents(charlie)
xml_child(charlie)
xml_child(charlie, 1)
xml_child(charlie, 2)
xml_child(charlie, 3)
sapply(charlie, xml_child)
lapply(charlie, xml_child)
for (i in xml_length(charlie)) { xml_child(charlie, i)}
for (i in xml_length(charlie)) { xml_child(charlie, i)}
xml_child(charlie, 3)
for (i in 1:xml_length(charlie)) { xml_child(charlie, i)}
for (i in 1:xml_length(charlie)) { xml_child(charlie, i)}
xml_child(charlie, 3)
delta <- for (i in 1:xml_length(charlie)) { xml_child(charlie, i)}
xml_child(charlie, i)
rm(delta)
for(i in 1:xml_length(charlie)) { xml_child(charlie, i) }
xml_contents(charlie)
html_structure(charlie)
head(html_structure(charlie))
View(html_structure(charlie))
as_list(charlie)
xml_structure(charlie)
writeLines(xml_structure(charlie), '~/Desktop/filestr')
writeLines(xml_structure(charlie), '~/Desktop/filestr.txt')
sink('~/Desktop/newout')
xml_structure(charlie)
sink()
charlie %>%
xml_find_all(".//document")
library(tidyverse)
charlie %>%
xml_find_all(".//document")
charlie %>%
xml_find_all(".//document") %>%
xml_find_first(".//title")
charlie %>%
xml_find_all("document")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
# xml_find_first(".//title")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
xml_find_first("packageid")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
xml_find_first("doi")
charlie %>%
# xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
xml_find_all("document") %>%
xml_find_first("doi")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
xml_find_all("//doi")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
# xml_find_all("//doi") %>%
xml_find_first("doi")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title") %>%
# xml_find_all("//doi") %>%
xml_find_first("//doi") %>%
# xml_find_first(".//title")
group_by(xml_find_all("document"))
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
charlie %>%
xml_find_first("document")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title")
xml_children(charlie)
print(charlie)
delta <- xml_children(charlie)
delta
charlie
for (i in seq_along(delta)) print(delta[i])
html_structure(delta)
xml_contents(charlie)
xml_child(charlie, 2)
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title") %>%
# xml_find_all("//doi") %>%
xml_find_first("//doi")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title") %>%
# xml_find_all("//doi") %>%
xml_find_all("//doi")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title") %>%
# xml_find_all("//doi") %>%
xml_find_all("//doi")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_first("title")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title") %>%
# xml_find_all("//doi") %>%
xml_find_all("doi")
charlie %>%
xml_find_first("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
xml_find_all("title")
charlie %>%
xml_find_all("document") %>%
# xml_find_all(".//document") %>%
# xml_find_all("title") %>%
# xml_find_all("//doi") %>%
xml_find_all("doi")
charlie %>%
xml_find_all("document") %>%
xml_child("title")
charlie %>%
xml_find_all("document") %>%
xml_child("title", "doi")
charlie %>%
xml_find_all("document") %>%
xml_child("title") %>%
xml_child("doi")
charlie %>%
xml_find_all("document") %>%
xml_children("title")
charlie %>%
xml_find_all("document") %>%
# xml_children("title") %>%
xml_children() %>%
xml_child("doi")
for(i in 1:xml_length(charlie)) { xml_child(charlie, i) }
xml_length(charlie)
charlie$title
charlie$node
charlie$doc
q()
source('~/localRepos/reml-helper-tools/createKMLFn.R')
View(createKML)
# libraries ----
library(EML)
library(RPostgreSQL)
library(RMySQL)
library(tidyverse)
library(tools)
library(readr)
library(readxl)
library(stringr)
getSlots('spatialVector')
getSlots('otherEntity')
View(createKML)
con <- dbConnect(MySQL(),
user='srearl',
password=.rs.askForPassword("Enter password:"),
dbname='lter34birds',
host='mysql.research.gios.asu.edu')
con <- dbConnect(MySQL(),
user='srearl',
password=.rs.askForPassword("Enter password:"),
dbname='lter34birds',
host='mysql.research.gios.asu.edu')
core_bird_locations <- dbGetQuery(con, "
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
blh.end_date_year
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null >= 1 AND
blh.end_date_year IS NULL)
UNION
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
MAX(blh.end_date_year)
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null IS NULL
GROUP BY s.site_code)
ORDER BY location_type, site_code;")
View(core_bird_locations)
CAPIV_PASS <- c("AA9B", "AA9C", "AA9", "Q15B", "Q15C", "TRSA", "TRSB", "TRSC", "W15B", "W15C", "Q15", "R18B", "R18C", "R18", "IBWA", "IBWB", "IBWC", "X17B", "X17C", "X17", "711A", "711B", "711C", "V14B", "V14C", "U18B", "U18C", "U18", "U21B", "U21", "PWRA", "PWRB", "PWRC", "U21C")
CAPIV_DesFert <- c("DBG", "WTM", "PWP", "SMW", "SRR", "UMP")
core_bird_locations %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization")) %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")) %>%
select(-count_any_null, end_date_year)
core_bird_locations %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization")) %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")) %>%
select(-count_any_null, end_date_year) %>%
arrange(location_type, site_code)
core_bird_locations %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization")) %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")) %>%
select(-count_any_null, -end_date_year) %>%
arrange(location_type, site_code)
core_bird_locations <- core_bird_locations %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization")) %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")) %>%
select(-count_any_null, -end_date_year) %>%
arrange(location_type, site_code)
library("sp")
library("rgdal")
coordinates(core_bird_locations) <- c("long", "lat")
proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
setwd("~/localRepos/knb-lter-cap.46")
writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
View(core_bird_locations)
source('~/localRepos/reml-helper-tools/createKMLFn.R')
View(createKML)
core_bird_locations <- createKML(kmlobject = 'core_bird_locations.kml',
description = kml_desc)
projectid <- 46
kml_desc <- "bird survey locations"
core_bird_locations <- createKML(kmlobject = 'core_bird_locations.kml',
description = kml_desc)
getwd()
createKML <- function(kmlobject, description) {
# rename the existing kml file with kml_new_name that features the project_id, base name, md5sum hash, and kml extension
new_kml_name <- paste0(projectid, "_", str_extract(kmlobject, "^[^\\.]*"), "_", md5sum(kmlobject), ".kml")
file.rename(kmlobject, new_kml_name)
# create @physical
physical <- set_physical(new_kml_name)
# add file size and unit to @physical
file_size <- new("size",
deparse(file.size(new_kml_name)),
unit = "byte")
physical@size <- file_size
# # add authentication type (here md5) to @physical
#   md5 <- new("authentication",
#              md5sum(new_kml_name),
#              method = "MD5")
# physical@authentication <- c(md5)
# add distribution to @physical
online_url <- new("online",
url = paste0("https://data.gios.asu.edu/datasets/cap/", new_kml_name))
file_dist <- new("distribution",
online = online_url)
physical@distribution <- c(file_dist)
# add kml format to physical
ext_format <- new("externallyDefinedFormat",
formatName = "kml")
dat_format <- new("dataFormat",
externallyDefinedFormat = ext_format)
physical@dataFormat <- dat_format
# create @otherEntity
newOE <- new("otherEntity",
entityName = new_kml_name,
entityDescription = description,
physical = physical,
id = new_kml_name,
entityType = "kml")
return(newOE)
}
core_bird_locations <- createKML(kmlobject = 'core_bird_locations.kml',
description = kml_desc)
writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
library("sp")
library("rgdal")
coordinates(core_bird_locations) <- c("long", "lat")
proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
# core_bird_locations <- spTransform(core_bird_locations, CRS("+proj=longlat +datum=WGS84"))
# spTransform not required here as already in WGS 84
writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
library("sp")
library("rgdal")
coordinates(core_bird_locations) <- c("long", "lat")
rm(core_bird_locations)
con <- dbConnect(MySQL(),
user='srearl',
password=.rs.askForPassword("Enter password:"),
dbname='lter34birds',
host='mysql.research.gios.asu.edu')
source('~/localRepos/reml-helper-tools/createKMLFn.R')
core_bird_locations <- dbGetQuery(con, "
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
blh.end_date_year
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null >= 1 AND
blh.end_date_year IS NULL)
UNION
(SELECT
any_null.count_any_null,
s.site_code,
CASE
WHEN s.sample LIKE '200 point' THEN 'ESCA'
WHEN s.sample LIKE 'North Desert Village' THEN 'NDV'
ELSE s.sample
END AS location_type,
blh.lat,
blh.`long`,
MAX(blh.end_date_year)
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
LEFT JOIN
(
SELECT
s.site_code,
COUNT(s.site_code) AS count_any_null
FROM lter34birds.birds_location_histories blh
JOIN lter34birds.sites s ON (s.site_id = blh.site_id)
WHERE blh.end_date_year IS NULL
GROUP BY s.site_code
) AS any_null ON (any_null.site_code = s.site_code)
WHERE
(
s.sample LIKE '200 point' OR
s.sample LIKE 'riparian' OR
s.sample LIKE 'capiv' OR
s.sample LIKE 'north desert village' OR
(s.sample LIKE 'SRBP' AND s.site_code LIKE CONCAT('%','CORE'))
) AND
any_null.count_any_null IS NULL
GROUP BY s.site_code)
ORDER BY location_type, site_code;")
core_bird_locations <- core_bird_locations %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_DesFert, "DesertFertilization")) %>%
mutate(location_type = replace(location_type, site_code %in% CAPIV_PASS, "PASS")) %>%
select(-count_any_null, end_date_year) %>%
arrange(location_type, site_code)
library("sp")
library("rgdal")
coordinates(core_bird_locations) <- c("long", "lat")
proj4string(core_bird_locations) <- CRS("+init=epsg:4326")
writeOGR(core_bird_locations, "core_bird_locations.kml", layer = "core_bird_locations", driver = "KML")
kml_desc <- "bird survey locations"
core_bird_locations <- createKML(kmlobject = 'core_bird_locations.kml',
description = kml_desc)
core_bird_locations
abstract <- as(set_TextType("knb-lter-46_abstract.md"), "abstract")
q()
